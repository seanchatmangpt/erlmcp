%% @doc Configuration management test suite
%% This test suite validates configuration loading, validation,
%% dynamic updates, and environment variable handling
-module(erlmcp_config_SUITE).

-compile(export_all).
-compile(nowarn_export_all).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").
-include("erlmcp.hrl").

%%--------------------------------------------------------------------
%% CT Callbacks
%%--------------------------------------------------------------------

suite() ->
    [{timetrap, {seconds, 30}}].

all() ->
    [
        test_config_loading,
        test_config_validation,
        test_environment_override,
        test_dynamic_reconfiguration,
        test_server_configuration,
        test_transport_configuration,
        test_config_defaults,
        test_config_merging,
        test_hot_reload,
        test_config_schema_validation,
        test_config_migration,
        test_invalid_config_handling,
        test_config_persistence,
        test_concurrent_updates,
        test_config_backup_restore
    ].

init_per_suite(Config) ->
    application:ensure_all_started(erlmcp),
    %% Setup test configuration directory
    TestDir = ?config(priv_dir, Config),
    ConfigDir = filename:join(TestDir, "config"),
    filelib:ensure_dir(filename:join(ConfigDir, "dummy")),
    [{config_dir, ConfigDir} | Config].

end_per_suite(_Config) ->
    application:stop(erlmcp),
    ok.

init_per_testcase(TestCase, Config) ->
    %% Clean configuration state
    erlmcp_config:reset_to_defaults(),
    [{test_case, TestCase} | Config].

end_per_testcase(_TestCase, _Config) ->
    erlmcp_config:reset_to_defaults(),
    ok.

%%--------------------------------------------------------------------
%% Test Cases
%%--------------------------------------------------------------------

%% @doc Test basic configuration loading from sys.config
test_config_loading(Config) ->
    ConfigDir = ?config(config_dir, Config),
    
    %% Create test config file
    ConfigFile = filename:join(ConfigDir, "test.config"),
    TestConfig = [
        {erlmcp, [
            {server_name, test_server},
            {port, 9090},
            {transports, [
                {stdio, #{enabled => true}},
                {tcp, #{enabled => true, port => 8080}}
            ]},
            {max_connections, 100}
        ]}
    ],
    
    ok = file:write_file(ConfigFile, io_lib:format("~p.~n", [TestConfig])),
    
    %% Test loading configuration
    {ok, LoadedConfig} = erlmcp_config:load_config(ConfigFile),
    
    %% Verify loaded values
    ?assertEqual(test_server, erlmcp_config:get(server_name)),
    ?assertEqual(9090, erlmcp_config:get(port)),
    ?assertEqual(100, erlmcp_config:get(max_connections)),
    
    %% Test nested configuration
    Transports = erlmcp_config:get(transports),
    ?assertMatch([{stdio, #{enabled := true}}, {tcp, #{enabled := true, port := 8080}}], Transports),
    
    ct:comment("Configuration loaded and validated successfully").

%% @doc Test configuration validation
test_config_validation(Config) ->
    %% Test valid configuration
    ValidConfig = [
        {server_name, valid_server},
        {port, 8080},
        {max_connections, 50}
    ],
    
    ?assertEqual(ok, erlmcp_config:validate_config(ValidConfig)),
    
    %% Test invalid port
    InvalidPortConfig = [{port, -1}],
    ?assertMatch({error, {validation_failed, _}}, 
                 erlmcp_config:validate_config(InvalidPortConfig)),
    
    %% Test invalid server name
    InvalidNameConfig = [{server_name, 123}],
    ?assertMatch({error, {validation_failed, _}}, 
                 erlmcp_config:validate_config(InvalidNameConfig)),
    
    %% Test missing required field (should use defaults)
    MinimalConfig = [],
    ?assertEqual(ok, erlmcp_config:validate_config(MinimalConfig)),
    
    ct:comment("Configuration validation working correctly").

%% @doc Test environment variable override
test_environment_override(Config) ->
    %% Set environment variables
    os:putenv("ERLMCP_PORT", "7777"),
    os:putenv("ERLMCP_SERVER_NAME", "env_server"),
    os:putenv("ERLMCP_MAX_CONNECTIONS", "200"),
    
    %% Load base configuration
    BaseConfig = [
        {server_name, base_server},
        {port, 8080},
        {max_connections, 100}
    ],
    
    ok = erlmcp_config:set_config(BaseConfig),
    
    %% Apply environment overrides
    ok = erlmcp_config:apply_env_overrides(),
    
    %% Verify overrides took effect
    ?assertEqual(env_server, erlmcp_config:get(server_name)),
    ?assertEqual(7777, erlmcp_config:get(port)),
    ?assertEqual(200, erlmcp_config:get(max_connections)),
    
    %% Clean up
    os:unsetenv("ERLMCP_PORT"),
    os:unsetenv("ERLMCP_SERVER_NAME"),
    os:unsetenv("ERLMCP_MAX_CONNECTIONS"),
    
    ct:comment("Environment variable overrides working correctly").

%% @doc Test dynamic runtime reconfiguration
test_dynamic_reconfiguration(Config) ->
    %% Set initial configuration
    InitialConfig = [
        {server_name, initial_server},
        {port, 8080},
        {max_connections, 100}
    ],
    
    ok = erlmcp_config:set_config(InitialConfig),
    ?assertEqual(initial_server, erlmcp_config:get(server_name)),
    
    %% Update configuration dynamically
    Updates = [
        {server_name, updated_server},
        {max_connections, 200}
    ],
    
    ok = erlmcp_config:update_config(Updates),
    
    %% Verify updates
    ?assertEqual(updated_server, erlmcp_config:get(server_name)),
    ?assertEqual(200, erlmcp_config:get(max_connections)),
    ?assertEqual(8080, erlmcp_config:get(port)), % Unchanged
    
    %% Test partial updates
    ok = erlmcp_config:update_config([{port, 9090}]),
    ?assertEqual(9090, erlmcp_config:get(port)),
    
    ct:comment("Dynamic reconfiguration working correctly").

%% @doc Test server configuration management
test_server_configuration(Config) ->
    %% Test server-specific configuration
    ServerConfig = [
        {server_name, test_server},
        {port, 8080},
        {acceptors, 10},
        {socket_opts, [{reuseaddr, true}, {keepalive, true}]},
        {protocol_opts, [{timeout, 5000}]}
    ],
    
    ok = erlmcp_config:set_server_config(ServerConfig),
    
    %% Verify server configuration
    ?assertEqual(test_server, erlmcp_config:get_server_config(server_name)),
    ?assertEqual(8080, erlmcp_config:get_server_config(port)),
    ?assertEqual(10, erlmcp_config:get_server_config(acceptors)),
    
    %% Test server configuration validation
    InvalidServerConfig = [{acceptors, -1}],
    ?assertMatch({error, _}, erlmcp_config:validate_server_config(InvalidServerConfig)),
    
    ct:comment("Server configuration management working correctly").

%% @doc Test transport configuration handling
test_transport_configuration(Config) ->
    %% Test multiple transport configurations
    TransportConfigs = [
        {stdio, #{
            enabled => true,
            buffer_size => 1024,
            timeout => 5000
        }},
        {tcp, #{
            enabled => true,
            port => 8080,
            acceptors => 10,
            socket_opts => [{reuseaddr, true}]
        }},
        {http, #{
            enabled => false,
            port => 8081,
            path => "/mcp"
        }}
    ],
    
    ok = erlmcp_config:set_transport_configs(TransportConfigs),
    
    %% Verify transport configurations
    StdioConfig = erlmcp_config:get_transport_config(stdio),
    ?assertMatch(#{enabled := true, buffer_size := 1024}, StdioConfig),
    
    TcpConfig = erlmcp_config:get_transport_config(tcp),
    ?assertMatch(#{enabled := true, port := 8080, acceptors := 10}, TcpConfig),
    
    %% Test enabled transports only
    EnabledTransports = erlmcp_config:get_enabled_transports(),
    ?assertEqual([stdio, tcp], EnabledTransports),
    
    %% Test transport validation
    InvalidTransport = {invalid, #{port => "not_a_port"}},
    ?assertMatch({error, _}, erlmcp_config:validate_transport_config(InvalidTransport)),
    
    ct:comment("Transport configuration handling working correctly").

%% @doc Test configuration defaults
test_config_defaults(Config) ->
    %% Reset to clean state
    erlmcp_config:reset_to_defaults(),
    
    %% Verify default values
    ?assertEqual(erlmcp_server, erlmcp_config:get(server_name)),
    ?assertEqual(8080, erlmcp_config:get(port)),
    ?assertEqual(100, erlmcp_config:get(max_connections)),
    ?assertEqual(5000, erlmcp_config:get(timeout)),
    
    %% Test default transport configurations
    DefaultTransports = erlmcp_config:get(transports),
    ?assert(is_list(DefaultTransports)),
    ?assert(length(DefaultTransports) > 0),
    
    ct:comment("Configuration defaults working correctly").

%% @doc Test configuration merging
test_config_merging(Config) ->
    %% Base configuration
    BaseConfig = [
        {server_name, base_server},
        {port, 8080},
        {transports, [
            {stdio, #{enabled => true}}
        ]}
    ],
    
    %% Override configuration
    OverrideConfig = [
        {port, 9090},
        {max_connections, 200},
        {transports, [
            {tcp, #{enabled => true, port => 8081}}
        ]}
    ],
    
    %% Merge configurations
    MergedConfig = erlmcp_config:merge_configs(BaseConfig, OverrideConfig),
    
    %% Verify merged values
    ok = erlmcp_config:set_config(MergedConfig),
    ?assertEqual(base_server, erlmcp_config:get(server_name)), % From base
    ?assertEqual(9090, erlmcp_config:get(port)), % Overridden
    ?assertEqual(200, erlmcp_config:get(max_connections)), % New
    
    %% Verify transport merging (should combine, not replace)
    Transports = erlmcp_config:get(transports),
    ?assertEqual(2, length(Transports)),
    
    ct:comment("Configuration merging working correctly").

%% @doc Test hot reload capability
test_hot_reload(Config) ->
    ConfigDir = ?config(config_dir, Config),
    ConfigFile = filename:join(ConfigDir, "hot_reload.config"),
    
    %% Create initial config file
    InitialConfig = [
        {erlmcp, [
            {server_name, initial_server},
            {port, 8080}
        ]}
    ],
    
    ok = file:write_file(ConfigFile, io_lib:format("~p.~n", [InitialConfig])),
    
    %% Load initial configuration
    ok = erlmcp_config:load_and_watch(ConfigFile),
    ?assertEqual(initial_server, erlmcp_config:get(server_name)),
    
    %% Modify config file
    UpdatedConfig = [
        {erlmcp, [
            {server_name, reloaded_server},
            {port, 9090}
        ]}
    ],
    
    ok = file:write_file(ConfigFile, io_lib:format("~p.~n", [UpdatedConfig])),
    
    %% Trigger reload
    ok = erlmcp_config:reload_config(),
    
    %% Wait for reload to complete
    timer:sleep(100),
    
    %% Verify updated values
    ?assertEqual(reloaded_server, erlmcp_config:get(server_name)),
    ?assertEqual(9090, erlmcp_config:get(port)),
    
    %% Stop watching
    ok = erlmcp_config:stop_watching(),
    
    ct:comment("Hot reload capability working correctly").

%% @doc Test configuration schema validation
test_config_schema_validation(Config) ->
    %% Test valid configuration against schema
    ValidConfig = [
        {server_name, test_server},
        {port, 8080},
        {max_connections, 100},
        {timeout, 5000},
        {transports, [
            {stdio, #{enabled => true}}
        ]}
    ],
    
    ?assertEqual(ok, erlmcp_config_schema:validate(ValidConfig)),
    
    %% Test invalid types
    InvalidTypeConfig = [{port, "not_a_port"}],
    ?assertMatch({error, {type_error, _}}, 
                 erlmcp_config_schema:validate(InvalidTypeConfig)),
    
    %% Test missing required fields
    IncompleteConfig = [{extra_field, value}],
    ?assertEqual(ok, erlmcp_config_schema:validate(IncompleteConfig)), % Should use defaults
    
    %% Test invalid enum values
    InvalidEnumConfig = [{log_level, invalid_level}],
    ?assertMatch({error, {enum_error, _}}, 
                 erlmcp_config_schema:validate(InvalidEnumConfig)),
    
    ct:comment("Configuration schema validation working correctly").

%% @doc Test configuration migration
test_config_migration(Config) ->
    %% Test migration from old format to new format
    OldConfig = [
        {name, old_server}, % Old field name
        {tcp_port, 8080},   % Old field name
        {connections, 50}   % Old field name
    ],
    
    %% Migrate configuration
    {ok, NewConfig} = erlmcp_config:migrate_config(OldConfig),
    
    %% Verify migration
    ok = erlmcp_config:set_config(NewConfig),
    ?assertEqual(old_server, erlmcp_config:get(server_name)),
    ?assertEqual(8080, erlmcp_config:get(port)),
    ?assertEqual(50, erlmcp_config:get(max_connections)),
    
    %% Test migration with version detection
    VersionedOldConfig = [
        {config_version, "1.0"},
        {name, versioned_server}
    ],
    
    {ok, VersionedNewConfig} = erlmcp_config:migrate_config(VersionedOldConfig),
    ?assert(is_list(VersionedNewConfig)),
    
    ct:comment("Configuration migration working correctly").

%% @doc Test invalid configuration handling
test_invalid_config_handling(Config) ->
    %% Test completely invalid configuration
    InvalidConfig = "not a config",
    ?assertMatch({error, _}, erlmcp_config:validate_config(InvalidConfig)),
    
    %% Test malformed configuration file
    ConfigDir = ?config(config_dir, Config),
    BadConfigFile = filename:join(ConfigDir, "bad.config"),
    ok = file:write_file(BadConfigFile, "invalid erlang term"),
    
    ?assertMatch({error, _}, erlmcp_config:load_config(BadConfigFile)),
    
    %% Test configuration with circular references
    CircularConfig = [
        {ref1, {ref, ref2}},
        {ref2, {ref, ref1}}
    ],
    
    ?assertMatch({error, _}, erlmcp_config:validate_config(CircularConfig)),
    
    ct:comment("Invalid configuration handling working correctly").

%% @doc Test configuration persistence
test_config_persistence(Config) ->
    ConfigDir = ?config(config_dir, Config),
    PersistFile = filename:join(ConfigDir, "persist.config"),
    
    %% Set configuration
    TestConfig = [
        {server_name, persist_server},
        {port, 8888},
        {max_connections, 150}
    ],
    
    ok = erlmcp_config:set_config(TestConfig),
    
    %% Persist configuration
    ok = erlmcp_config:persist_config(PersistFile),
    
    %% Verify file was created
    ?assert(filelib:is_file(PersistFile)),
    
    %% Reset configuration
    erlmcp_config:reset_to_defaults(),
    ?assertNotEqual(persist_server, erlmcp_config:get(server_name)),
    
    %% Load persisted configuration
    {ok, _} = erlmcp_config:load_config(PersistFile),
    
    %% Verify loaded values
    ?assertEqual(persist_server, erlmcp_config:get(server_name)),
    ?assertEqual(8888, erlmcp_config:get(port)),
    ?assertEqual(150, erlmcp_config:get(max_connections)),
    
    ct:comment("Configuration persistence working correctly").

%% @doc Test concurrent configuration updates
test_concurrent_updates(Config) ->
    NumProcesses = 10,
    Parent = self(),
    
    %% Spawn concurrent updaters
    Pids = [spawn_link(fun() ->
        Key = list_to_atom("key_" ++ integer_to_list(N)),
        Value = N * 100,
        ok = erlmcp_config:update_config([{Key, Value}]),
        Parent ! {updated, N, Key, Value}
    end) || N <- lists:seq(1, NumProcesses)],
    
    %% Collect results
    Results = [receive
        {updated, N, Key, Value} -> {N, Key, Value}
    after 5000 ->
        throw(timeout)
    end || _ <- Pids],
    
    %% Verify all updates were applied
    ?assertEqual(NumProcesses, length(Results)),
    
    %% Verify configuration integrity
    lists:foreach(fun({N, Key, Value}) ->
        ?assertEqual(Value, erlmcp_config:get(Key))
    end, Results),
    
    ct:comment("Concurrent configuration updates working correctly").

%% @doc Test configuration backup and restore
test_config_backup_restore(Config) ->
    ConfigDir = ?config(config_dir, Config),
    BackupFile = filename:join(ConfigDir, "backup.config"),
    
    %% Set initial configuration
    InitialConfig = [
        {server_name, backup_test_server},
        {port, 7777},
        {max_connections, 75}
    ],
    
    ok = erlmcp_config:set_config(InitialConfig),
    
    %% Create backup
    ok = erlmcp_config:backup_config(BackupFile),
    
    %% Modify configuration
    ModifiedConfig = [
        {server_name, modified_server},
        {port, 8888}
    ],
    
    ok = erlmcp_config:update_config(ModifiedConfig),
    ?assertEqual(modified_server, erlmcp_config:get(server_name)),
    ?assertEqual(8888, erlmcp_config:get(port)),
    
    %% Restore from backup
    ok = erlmcp_config:restore_config(BackupFile),
    
    %% Verify restored values
    ?assertEqual(backup_test_server, erlmcp_config:get(server_name)),
    ?assertEqual(7777, erlmcp_config:get(port)),
    ?assertEqual(75, erlmcp_config:get(max_connections)),
    
    ct:comment("Configuration backup and restore working correctly").

%%--------------------------------------------------------------------
%% Helper Functions
%%--------------------------------------------------------------------

%% @doc Create a test configuration file
create_test_config(File, Config) ->
    Content = io_lib:format("~p.~n", [Config]),
    ok = file:write_file(File, Content).

%% @doc Wait for configuration change notification
wait_for_config_change(Timeout) ->
    receive
        {config_changed, _} -> ok
    after Timeout ->
        timeout
    end.