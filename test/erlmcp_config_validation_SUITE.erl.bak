%% @doc Configuration validation test suite
%% Tests the comprehensive configuration validation system for all transport types

-module(erlmcp_config_validation_SUITE).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").
-include("../include/erlmcp.hrl").

%% Common Test callbacks
-export([all/0, groups/0, init_per_suite/1, end_per_suite/1, 
         init_per_group/2, end_per_group/2, init_per_testcase/2, end_per_testcase/2]).

%% Test cases
-export([
    test_stdio_config_validation/1,
    test_tcp_config_validation/1,
    test_http_config_validation/1,
    test_invalid_transport_type/1,
    test_missing_required_fields/1,
    test_unknown_fields/1,
    test_field_type_validation/1,
    test_schema_retrieval/1,
    test_field_validation/1,
    test_config_examples/1,
    test_error_message_formatting/1,
    test_ssl_config_validation/1,
    test_cors_config_validation/1
]).

all() ->
    [
        {group, stdio_config},
        {group, tcp_config},
        {group, http_config},
        {group, schema_api},
        {group, error_handling}
    ].

groups() ->
    [
        {stdio_config, [parallel], [
            test_stdio_config_validation
        ]},
        {tcp_config, [parallel], [
            test_tcp_config_validation,
            test_ssl_config_validation
        ]},
        {http_config, [parallel], [
            test_http_config_validation,
            test_cors_config_validation
        ]},
        {schema_api, [parallel], [
            test_schema_retrieval,
            test_field_validation,
            test_config_examples
        ]},
        {error_handling, [parallel], [
            test_invalid_transport_type,
            test_missing_required_fields,
            test_unknown_fields,
            test_field_type_validation,
            test_error_message_formatting
        ]}
    ].

init_per_suite(Config) ->
    %% Start the erlmcp application if needed
    case application:start(erlmcp) of
        ok -> ok;
        {error, {already_started, erlmcp}} -> ok;
        Error -> 
            ct:pal("Failed to start erlmcp: ~p", [Error]),
            Error
    end,
    Config.

end_per_suite(_Config) ->
    %% Clean up if needed
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, _Config) ->
    ok.

init_per_testcase(_TestCase, Config) ->
    Config.

end_per_testcase(_TestCase, _Config) ->
    ok.

%%====================================================================
%% STDIO Configuration Tests
%%====================================================================

test_stdio_config_validation(_Config) ->
    %% Valid minimal STDIO config
    ValidMinimal = #{type => stdio},
    ?assertEqual(ok, erlmcp:validate_transport_config(ValidMinimal)),
    
    %% Valid full STDIO config
    ValidFull = #{
        type => stdio,
        server_id => test_server,
        test_mode => true,
        buffer_size => 4096
    },
    ?assertEqual(ok, erlmcp:validate_transport_config(ValidFull)),
    
    %% Invalid test_mode type
    InvalidTestMode = #{type => stdio, test_mode => \"not_boolean\"},
    {error, {validation_error, _, test_mode, _}} = 
        erlmcp:validate_transport_config(InvalidTestMode),
    
    %% Invalid server_id type
    InvalidServerId = #{type => stdio, server_id => \"not_atom\"},
    {error, {validation_error, _, server_id, _}} = 
        erlmcp:validate_transport_config(InvalidServerId),
        
    %% Invalid buffer_size
    InvalidBufferSize = #{type => stdio, buffer_size => -1},
    {error, {validation_error, _, buffer_size, _}} = 
        erlmcp:validate_transport_config(InvalidBufferSize),
    
    ok.

%%====================================================================
%% TCP Configuration Tests
%%====================================================================

test_tcp_config_validation(_Config) ->
    %% Valid minimal TCP config
    ValidMinimal = #{
        type => tcp,
        host => \"localhost\",
        port => 8080
    },
    ?assertEqual(ok, erlmcp:validate_transport_config(ValidMinimal)),
    
    %% Valid full TCP config
    ValidFull = #{
        type => tcp,
        host => <<"example.com">>,
        port => 9090,
        keepalive => true,
        connect_timeout => 5000,
        max_reconnect_attempts => 3,
        server_id => tcp_server
    },
    ?assertEqual(ok, erlmcp:validate_transport_config(ValidFull)),
    
    %% Invalid port range
    InvalidPortLow = #{type => tcp, host => \"localhost\", port => 0},
    {error, {validation_error, _, port, _}} = 
        erlmcp:validate_transport_config(InvalidPortLow),
        
    InvalidPortHigh = #{type => tcp, host => \"localhost\", port => 70000},
    {error, {validation_error, _, port, _}} = 
        erlmcp:validate_transport_config(InvalidPortHigh),
    
    %% Invalid host type
    InvalidHost = #{type => tcp, host => 123, port => 8080},
    {error, {validation_error, _, host, _}} = 
        erlmcp:validate_transport_config(InvalidHost),
    
    %% Empty host
    EmptyHost = #{type => tcp, host => \"\", port => 8080},
    {error, {validation_error, _, host, _}} = 
        erlmcp:validate_transport_config(EmptyHost),
    
    ok.

test_ssl_config_validation(_Config) ->
    %% Create temporary files for testing
    {ok, TmpDir} = file:get_cwd(),
    CertFile = filename:join(TmpDir, \"test.crt\"),
    KeyFile = filename:join(TmpDir, \"test.key\"),
    
    %% Create dummy cert and key files
    ok = file:write_file(CertFile, \"dummy cert content\"),
    ok = file:write_file(KeyFile, \"dummy key content\"),
    
    try
        %% Valid SSL config
        ValidSSL = #{
            type => tcp,
            host => \"localhost\",
            port => 8443,
            ssl => true,
            certfile => CertFile,
            keyfile => KeyFile
        },
        ?assertEqual(ok, erlmcp:validate_transport_config(ValidSSL)),
        
        %% SSL enabled but missing cert file
        MissingCert = #{
            type => tcp,
            host => \"localhost\",
            port => 8443,
            ssl => true,
            keyfile => KeyFile
        },
        {error, {validation_error, _, certfile, _}} = 
            erlmcp:validate_transport_config(MissingCert),
        
        %% SSL enabled but cert file doesn't exist
        NonExistentCert = #{
            type => tcp,
            host => \"localhost\",
            port => 8443,
            ssl => true,
            certfile => \"/nonexistent/cert.pem\",
            keyfile => KeyFile
        },
        {error, {validation_error, _, certfile, _}} = 
            erlmcp:validate_transport_config(NonExistentCert),
        
        ok
    after
        %% Clean up test files
        file:delete(CertFile),
        file:delete(KeyFile)
    end.

%%====================================================================
%% HTTP Configuration Tests
%%====================================================================

test_http_config_validation(_Config) ->
    %% Valid minimal HTTP config
    ValidMinimal = #{
        type => http,
        url => \"https://api.example.com/mcp\"
    },
    ?assertEqual(ok, erlmcp:validate_transport_config(ValidMinimal)),
    
    %% Valid full HTTP config
    ValidFull = #{
        type => http,
        url => <<"http://localhost:8000/api">>,
        method => post,
        headers => #{<<\"Content-Type\">> => <<\"application/json\">>},
        timeout => 30000,
        server_id => http_server,
        cors => true,
        max_body_size => 1048576
    },
    ?assertEqual(ok, erlmcp:validate_transport_config(ValidFull)),
    
    %% Invalid URL format
    InvalidUrl = #{type => http, url => \"not-a-url\"},
    {error, {validation_error, _, url, _}} = 
        erlmcp:validate_transport_config(InvalidUrl),
    
    %% Invalid HTTP method
    InvalidMethod = #{type => http, url => \"https://example.com\", method => invalid},
    {error, {validation_error, _, method, _}} = 
        erlmcp:validate_transport_config(InvalidMethod),
    
    %% Invalid headers format
    InvalidHeaders = #{type => http, url => \"https://example.com\", headers => \"not_a_map\"},
    {error, {validation_error, _, headers, _}} = 
        erlmcp:validate_transport_config(InvalidHeaders),
    
    %% Invalid timeout
    InvalidTimeout = #{type => http, url => \"https://example.com\", timeout => -1},
    {error, {validation_error, _, timeout, _}} = 
        erlmcp:validate_transport_config(InvalidTimeout),
    
    ok.

test_cors_config_validation(_Config) ->
    BaseConfig = #{type => http, url => \"https://api.example.com\"},
    
    %% Valid CORS boolean values
    ?assertEqual(ok, erlmcp:validate_transport_config(BaseConfig#{cors => true})),
    ?assertEqual(ok, erlmcp:validate_transport_config(BaseConfig#{cors => false})),
    
    %% Valid CORS origins list
    ValidOrigins = [\"https://app.example.com\", <<\"https://admin.example.com\">>],
    ?assertEqual(ok, erlmcp:validate_transport_config(BaseConfig#{cors => ValidOrigins})),
    
    %% Invalid CORS origins
    InvalidOrigins = [\"https://valid.com\", 123],
    {error, {validation_error, _, cors, _}} = 
        erlmcp:validate_transport_config(BaseConfig#{cors => InvalidOrigins}),
    
    %% Invalid CORS type
    {error, {validation_error, _, cors, _}} = 
        erlmcp:validate_transport_config(BaseConfig#{cors => \"invalid\"}),
    
    ok.

%%====================================================================
%% Schema API Tests
%%====================================================================

test_schema_retrieval(_Config) ->
    %% Test schema retrieval for supported types
    {ok, StdioSchema} = erlmcp:get_config_schema(stdio),
    ?assert(is_map(StdioSchema)),
    ?assert(maps:is_key(required_fields, StdioSchema)),
    ?assert(maps:is_key(optional_fields, StdioSchema)),
    ?assert(maps:is_key(field_validators, StdioSchema)),
    ?assert(maps:is_key(description, StdioSchema)),
    
    {ok, TcpSchema} = erlmcp:get_config_schema(tcp),
    ?assert(is_map(TcpSchema)),
    
    {ok, HttpSchema} = erlmcp:get_config_schema(http),
    ?assert(is_map(HttpSchema)),
    
    %% Test unknown transport type
    {error, {unknown_transport_type, unknown}} = erlmcp:get_config_schema(unknown),
    
    ok.

test_field_validation(_Config) ->
    %% Valid field validation
    ?assertEqual(ok, erlmcp:validate_config_field(stdio, type, stdio)),
    ?assertEqual(ok, erlmcp:validate_config_field(tcp, port, 8080)),
    ?assertEqual(ok, erlmcp:validate_config_field(http, method, get)),
    
    %% Invalid field values
    {error, {validation_error, _, type, _}} = 
        erlmcp:validate_config_field(stdio, type, tcp),
    {error, {validation_error, _, port, _}} = 
        erlmcp:validate_config_field(tcp, port, -1),
    {error, {validation_error, _, method, _}} = 
        erlmcp:validate_config_field(http, method, invalid_method),
    
    %% Unknown field
    {error, {unknown_field, unknown_field, stdio}} = 
        erlmcp:validate_config_field(stdio, unknown_field, value),
    
    %% Unknown transport type
    {error, {unknown_transport_type, unknown}} = 
        erlmcp:validate_config_field(unknown, field, value),
    
    ok.

test_config_examples(_Config) ->
    Examples = erlmcp:get_config_examples(),
    ?assert(is_map(Examples)),
    ?assert(maps:is_key(stdio, Examples)),
    ?assert(maps:is_key(tcp, Examples)),
    ?assert(maps:is_key(http, Examples)),
    
    %% Validate that examples are actually valid configs
    StdioExample = maps:get(stdio, Examples),
    ?assertEqual(ok, erlmcp:validate_transport_config(StdioExample)),
    
    TcpExample = maps:get(tcp, Examples),
    ?assertEqual(ok, erlmcp:validate_transport_config(TcpExample)),
    
    HttpExample = maps:get(http, Examples),
    ?assertEqual(ok, erlmcp:validate_transport_config(HttpExample)),
    
    ok.

%%====================================================================
%% Error Handling Tests
%%====================================================================

test_invalid_transport_type(_Config) ->
    InvalidConfig = #{type => invalid_type},
    {error, {validation_error, unknown_transport_type, invalid_type, Msg}} = 
        erlmcp:validate_transport_config(InvalidConfig),
    ?assert(is_list(Msg)),
    ?assert(length(Msg) > 0),
    ok.

test_missing_required_fields(_Config) ->
    %% Missing type field
    {error, {validation_error, missing_required_field, type, _}} = 
        erlmcp:validate_transport_config(#{}),
    
    %% Missing required fields for TCP
    {error, {validation_error, missing_required_field, host, _}} = 
        erlmcp:validate_transport_config(#{type => tcp, port => 8080}),
    
    {error, {validation_error, missing_required_field, port, _}} = 
        erlmcp:validate_transport_config(#{type => tcp, host => \"localhost\"}),
    
    %% Missing required field for HTTP
    {error, {validation_error, missing_required_field, url, _}} = 
        erlmcp:validate_transport_config(#{type => http, method => get}),
    
    ok.

test_unknown_fields(_Config) ->
    %% Unknown field in STDIO config
    {error, {validation_error, unknown_field, unknown_field, _}} = 
        erlmcp:validate_transport_config(#{type => stdio, unknown_field => value}),
    
    %% Unknown field in TCP config
    {error, {validation_error, unknown_field, bad_field, _}} = 
        erlmcp:validate_transport_config(#{
            type => tcp, 
            host => \"localhost\", 
            port => 8080,
            bad_field => value
        }),
    
    ok.

test_field_type_validation(_Config) ->
    %% Test various field type validations
    Configs = [
        {#{type => stdio, test_mode => \"not_boolean\"}, test_mode},
        {#{type => tcp, host => \"localhost\", port => \"not_integer\"}, port},
        {#{type => tcp, host => \"localhost\", port => 8080, keepalive => \"not_boolean\"}, keepalive},
        {#{type => http, url => \"https://example.com\", timeout => \"not_integer\"}, timeout},
        {#{type => http, url => \"https://example.com\", headers => \"not_map\"}, headers}
    ],
    
    lists:foreach(fun({Config, ExpectedField}) ->
        {error, {validation_error, invalid_field_value, Field, _}} = 
            erlmcp:validate_transport_config(Config),
        ?assertEqual(ExpectedField, Field)
    end, Configs),
    
    ok.

test_error_message_formatting(_Config) ->
    %% Test that error messages are properly formatted and informative
    {error, {validation_error, missing_required_field, type, Msg1}} = 
        erlmcp:validate_transport_config(#{}),
    ?assert(is_list(Msg1)),
    ?assert(length(Msg1) > 10), % Should be a meaningful message
    
    {error, {validation_error, unknown_transport_type, invalid, Msg2}} = 
        erlmcp:validate_transport_config(#{type => invalid}),
    ?assert(is_list(Msg2)),
    ?assert(string:find(Msg2, \"stdio\") =/= nomatch), % Should mention valid types
    
    {error, {validation_error, invalid_field_value, port, Msg3}} = 
        erlmcp:validate_transport_config(#{type => tcp, host => \"localhost\", port => -1}),
    ?assert(is_list(Msg3)),
    ?assert(string:find(Msg3, \"between\") =/= nomatch), % Should mention valid range
    
    ok.