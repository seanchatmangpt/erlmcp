{
    "sourceFile": "test/erlmcp_wrappers_quick_SUITE.erl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756190521752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756190592774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,50 +3,74 @@\n -include_lib(\"common_test/include/ct.hrl\").\n -include_lib(\"eunit/include/eunit.hrl\").\n \n -export([all/0, init_per_suite/1, end_per_suite/1]).\n--export([transport_api_wrappers/1, validation_wrappers/1, setup_wrappers/1, binding_wrappers/1, util_wrappers/1]).\n+-export([transport_api_wrappers/1, validation_wrappers/1, setup_wrappers/1,\n+         binding_wrappers/1, util_wrappers/1]).\n \n-all() -> [transport_api_wrappers, validation_wrappers, setup_wrappers, binding_wrappers, util_wrappers].\n+all() ->\n+  [transport_api_wrappers,\n+   validation_wrappers,\n+   setup_wrappers,\n+   binding_wrappers,\n+   util_wrappers].\n \n init_per_suite(Config) ->\n-    Config.\n+  Config.\n \n-end_per_suite(_Config) -> ok.\n+end_per_suite(_Config) ->\n+  ok.\n \n transport_api_wrappers(_Config) ->\n-    %% Ensure functions exist and callable\n-    ?assertEqual(ok, case catch erlmcp_transport_api:ensure_transport_supervisor() of ok -> ok; _ -> ok end),\n-    ?assert(is_list(erlmcp_transport_api:list_transports())),\n-    ok.\n+  %% Ensure functions exist and callable\n+  ?assertEqual(ok,\n+               case catch erlmcp_transport_api:ensure_transport_supervisor() of\n+                 ok ->\n+                   ok;\n+                 _ ->\n+                   ok\n+               end),\n+  ?assert(is_list(erlmcp_transport_api:list_transports())),\n+  ok.\n \n validation_wrappers(_Config) ->\n-    %% Validate a trivial HTTP config shape via wrapper\n-    {ok, _} = erlmcp_validation:get_config_schema(http),\n-    ok = case erlmcp_validation:validate_transport_config(http, #{type => http, url => \"http://localhost/\"}) of\n-             ok -> ok; {error, _} -> ok\n-         end,\n-    ok.\n+  %% Validate a trivial HTTP config shape via wrapper\n+  {ok, _} = erlmcp_validation:get_config_schema(http),\n+  ok =\n+    case erlmcp_validation:validate_transport_config(http,\n+                                                     #{type => http, url => \"http://localhost/\"})\n+    of\n+      ok ->\n+        ok;\n+      {error, _} ->\n+        ok\n+    end,\n+  ok.\n \n setup_wrappers(_Config) ->\n-    %% Just ensure exported functions are callable (no side effects in this quick test)\n-    ?assert(fun_test_exported(start_transport_enhanced, 3)),\n-    ?assert(fun_test_exported(start_transport_with_retry, 4)),\n-    ok.\n+  %% Just ensure exported functions are callable (no side effects in this quick test)\n+  ?assert(fun_test_exported(start_transport_enhanced, 3)),\n+  ?assert(fun_test_exported(start_transport_with_retry, 4)),\n+  ok.\n \n binding_wrappers(_Config) ->\n-    %% Functions should be callable; results depend on registry availability\n-    _ = case catch erlmcp_binding:list_transport_bindings() of\n-            {error, _} -> ok; L when is_list(L) -> ok; _ -> ok\n-        end,\n-    ok.\n+  %% Functions should be callable; results depend on registry availability\n+  _ = case catch erlmcp_binding:list_transport_bindings() of\n+        {error, _} ->\n+          ok;\n+        L when is_list(L) ->\n+          ok;\n+        _ ->\n+          ok\n+      end,\n+  ok.\n \n util_wrappers(_Config) ->\n-    Id = erlmcp_util:create_transport_id(my_server, <<\"tcp\">>),\n-    ?assert(is_atom(Id)),\n-    ?assert(is_list(erlmcp_util:list_supported_transport_types())),\n-    Ex = erlmcp_util:get_config_examples(),\n-    ?assert(is_map(Ex)),\n-    ok.\n+  Id = erlmcp_util:create_transport_id(my_server, <<\"tcp\">>),\n+  ?assert(is_atom(Id)),\n+  ?assert(is_list(erlmcp_util:list_supported_transport_types())),\n+  Ex = erlmcp_util:get_config_examples(),\n+  ?assert(is_map(Ex)),\n+  ok.\n \n fun_test_exported(Name, Arity) ->\n-    lists:member({Name, Arity}, erlmcp_setup:module_info(exports)).\n+  lists:member({Name, Arity}, erlmcp_setup:module_info(exports)).\n"
                }
            ],
            "date": 1756190521752,
            "name": "Commit-0",
            "content": "-module(erlmcp_wrappers_quick_SUITE).\n\n-include_lib(\"common_test/include/ct.hrl\").\n-include_lib(\"eunit/include/eunit.hrl\").\n\n-export([all/0, init_per_suite/1, end_per_suite/1]).\n-export([transport_api_wrappers/1, validation_wrappers/1, setup_wrappers/1, binding_wrappers/1, util_wrappers/1]).\n\nall() -> [transport_api_wrappers, validation_wrappers, setup_wrappers, binding_wrappers, util_wrappers].\n\ninit_per_suite(Config) ->\n    Config.\n\nend_per_suite(_Config) -> ok.\n\ntransport_api_wrappers(_Config) ->\n    %% Ensure functions exist and callable\n    ?assertEqual(ok, case catch erlmcp_transport_api:ensure_transport_supervisor() of ok -> ok; _ -> ok end),\n    ?assert(is_list(erlmcp_transport_api:list_transports())),\n    ok.\n\nvalidation_wrappers(_Config) ->\n    %% Validate a trivial HTTP config shape via wrapper\n    {ok, _} = erlmcp_validation:get_config_schema(http),\n    ok = case erlmcp_validation:validate_transport_config(http, #{type => http, url => \"http://localhost/\"}) of\n             ok -> ok; {error, _} -> ok\n         end,\n    ok.\n\nsetup_wrappers(_Config) ->\n    %% Just ensure exported functions are callable (no side effects in this quick test)\n    ?assert(fun_test_exported(start_transport_enhanced, 3)),\n    ?assert(fun_test_exported(start_transport_with_retry, 4)),\n    ok.\n\nbinding_wrappers(_Config) ->\n    %% Functions should be callable; results depend on registry availability\n    _ = case catch erlmcp_binding:list_transport_bindings() of\n            {error, _} -> ok; L when is_list(L) -> ok; _ -> ok\n        end,\n    ok.\n\nutil_wrappers(_Config) ->\n    Id = erlmcp_util:create_transport_id(my_server, <<\"tcp\">>),\n    ?assert(is_atom(Id)),\n    ?assert(is_list(erlmcp_util:list_supported_transport_types())),\n    Ex = erlmcp_util:get_config_examples(),\n    ?assert(is_map(Ex)),\n    ok.\n\nfun_test_exported(Name, Arity) ->\n    lists:member({Name, Arity}, erlmcp_setup:module_info(exports)).\n"
        }
    ]
}