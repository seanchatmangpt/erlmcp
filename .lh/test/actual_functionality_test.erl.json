{
    "sourceFile": "test/actual_functionality_test.erl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756188161125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756188161125,
            "name": "Commit-0",
            "content": "%%%-------------------------------------------------------------------\n%%% @doc\n%%% Comprehensive functional test to validate what actually works\n%%% This focuses on concrete functional validation\n%%%-------------------------------------------------------------------\n-module(actual_functionality_test).\n\n-export([test_all/0]).\n\ntest_all() ->\n    io:format(\"=== ERLMCP TRANSPORT FUNCTIONALITY VALIDATION ===~n~n\"),\n\n    %% Test transport module loading and function availability\n    io:format(\"1. MODULE LOADING TESTS:~n\"),\n    test_module_loading(),\n\n    %% Test basic transport functionality\n    io:format(\"~n2. BASIC FUNCTIONALITY TESTS:~n\"),\n    test_basic_functionality(),\n\n    %% Test transport integration\n    io:format(\"~n3. INTEGRATION TESTS:~n\"),\n    test_integration(),\n\n    %% Test message processing\n    io:format(\"~n4. MESSAGE PROCESSING TESTS:~n\"),\n    test_message_processing(),\n\n    %% Summary\n    io:format(\"~n=== TEST SUMMARY ===~n\"),\n    io:format(\"Validation complete. Check output above for detailed results.~n\").\n\n%%====================================================================\n%% Module Loading Tests\n%%====================================================================\n\ntest_module_loading() ->\n    Modules =\n        [erlmcp_transport_stdio_new,\n         erlmcp_transport_tcp_new,\n         erlmcp_transport_http_new,\n         erlmcp_registry,\n         erlmcp_transport_behavior],\n\n    lists:foreach(fun(Module) ->\n                     case code:ensure_loaded(Module) of\n                         {module, Module} ->\n                             io:format(\"  â ~p: loaded successfully~n\", [Module]),\n                             test_module_exports(Module);\n                         {error, Reason} ->\n                             io:format(\"  â ~p: failed to load - ~p~n\", [Module, Reason])\n                     end\n                  end,\n                  Modules).\n\ntest_module_exports(Module) ->\n    Exports = Module:module_info(exports),\n    ExpectedFunctions = [{start_link, 2}, {send, 2}, {close, 1}, {get_info, 1}],\n\n    case Module of\n        erlmcp_registry ->\n            % Registry has different functions\n            RequiredFuncs = [{start_link, 0}, {find_transport, 1}],\n            lists:foreach(fun({Func, Arity}) ->\n                             case lists:member({Func, Arity}, Exports) of\n                                 true ->\n                                     io:format(\"    â ~p:~p/~p exported~n\", [Module, Func, Arity]);\n                                 false ->\n                                     io:format(\"    â ~p:~p/~p NOT exported~n\",\n                                               [Module, Func, Arity])\n                             end\n                          end,\n                          RequiredFuncs);\n        erlmcp_transport_behavior ->\n            % Behavior module has different exports\n            ok;\n        _ ->\n            % Transport modules\n            lists:foreach(fun({Func, Arity}) ->\n                             case lists:member({Func, Arity}, Exports) of\n                                 true ->\n                                     io:format(\"    â ~p:~p/~p exported~n\", [Module, Func, Arity]);\n                                 false ->\n                                     io:format(\"    â ~p:~p/~p NOT exported~n\",\n                                               [Module, Func, Arity])\n                             end\n                          end,\n                          ExpectedFunctions)\n    end.\n\n%%====================================================================\n%% Basic Functionality Tests\n%%====================================================================\n\ntest_basic_functionality() ->\n    test_stdio_basic(),\n    test_tcp_basic(),\n    test_http_basic().\n\ntest_stdio_basic() ->\n    io:format(\"  STDIO Transport:~n\"),\n    try\n        Config = #{test_mode => true},\n        case erlmcp_transport_stdio_new:start_link(stdio_test, Config) of\n            {ok, Pid} ->\n                io:format(\"    ✓ Startup: successful~n\"),\n\n                % Test send\n                case erlmcp_transport_stdio_new:send(Pid, <<\"test message\">>) of\n                    ok ->\n                        io:format(\"    ✓ Send: functional~n\");\n                    {error, Reason1} ->\n                        io:format(\"    ✗ Send: failed - ~p~n\", [Reason1])\n                end,\n\n                % Test get_info\n                case catch erlmcp_transport_stdio_new:get_info(Pid) of\n                    Info when is_map(Info) ->\n                        io:format(\"    â Get Info: functional - type: ~p~n\",\n                                  [maps:get(type, Info, unknown)]);\n                    {'EXIT', Reason2} ->\n                        io:format(\"    ✗ Get Info: failed - ~p~n\", [Reason2]);\n                    Other2 ->\n                        io:format(\"    ✗ Get Info: failed - ~p~n\", [Other2])\n                end,\n\n                % Test close\n                case catch erlmcp_transport_stdio_new:close(Pid) of\n                    ok ->\n                        io:format(\"    ✓ Close: functional~n\");\n                    {'EXIT', Reason3} ->\n                        io:format(\"    ✗ Close: failed - ~p~n\", [Reason3]);\n                    Other3 ->\n                        io:format(\"    ✗ Close: failed - ~p~n\", [Other3])\n                end,\n\n                gen_server:stop(Pid, shutdown, 1000);\n            Error ->\n                io:format(\"    ✗ Startup: failed - ~p~n\", [Error])\n        end\n    catch\n        Class:Reason:Stack ->\n            io:format(\"    ✗ Exception during STDIO test: ~p:~p~n\", [Class, Reason])\n    end.\n\ntest_tcp_basic() ->\n    io:format(\"  TCP Transport:~n\"),\n    try\n        Config =\n            #{test_mode => true,\n              host => \"127.0.0.1\",\n              port => 8080},\n        case erlmcp_transport_tcp_new:start_link(tcp_test, Config) of\n            {ok, Pid} ->\n                io:format(\"    ✓ Startup: successful~n\"),\n\n                % Test send\n                case erlmcp_transport_tcp_new:send(Pid, <<\"test message\">>) of\n                    ok ->\n                        io:format(\"    ✓ Send: functional~n\");\n                    {error, Reason4} ->\n                        io:format(\"    ✗ Send: failed - ~p~n\", [Reason4])\n                end,\n\n                % Test get_info\n                case catch erlmcp_transport_tcp_new:get_info(Pid) of\n                    Info when is_map(Info) ->\n                        io:format(\"    â Get Info: functional - type: ~p~n\",\n                                  [maps:get(type, Info, unknown)]);\n                    {'EXIT', Reason5} ->\n                        io:format(\"    ✗ Get Info: failed - ~p~n\", [Reason5]);\n                    Other5 ->\n                        io:format(\"    ✗ Get Info: failed - ~p~n\", [Other5])\n                end,\n\n                gen_server:stop(Pid, shutdown, 1000);\n            Error ->\n                io:format(\"    ✗ Startup: failed - ~p~n\", [Error])\n        end\n    catch\n        Class:Reason:Stack ->\n            io:format(\"    ✗ Exception during TCP test: ~p:~p~n\", [Class, Reason])\n    end.\n\ntest_http_basic() ->\n    io:format(\"  HTTP Transport:~n\"),\n    try\n        Config =\n            #{test_mode => true,\n              port => 8080,\n              path => \"/mcp\"},\n        case erlmcp_transport_http_new:start_link(http_test, Config) of\n            {ok, Pid} ->\n                io:format(\"    ✓ Startup: successful~n\"),\n\n                % Test send\n                case erlmcp_transport_http_new:send(Pid, <<\"test message\">>) of\n                    ok ->\n                        io:format(\"    ✓ Send: functional~n\");\n                    {error, Reason6} ->\n                        io:format(\"    ✗ Send: failed - ~p~n\", [Reason6])\n                end,\n\n                % Test get_info\n                case catch erlmcp_transport_http_new:get_info(Pid) of\n                    Info when is_map(Info) ->\n                        io:format(\"    â Get Info: functional - type: ~p~n\",\n                                  [maps:get(type, Info, unknown)]);\n                    {'EXIT', Reason7} ->\n                        io:format(\"    ✗ Get Info: failed - ~p~n\", [Reason7]);\n                    Other7 ->\n                        io:format(\"    ✗ Get Info: failed - ~p~n\", [Other7])\n                end,\n\n                gen_server:stop(Pid, shutdown, 1000);\n            Error ->\n                io:format(\"    ✗ Startup: failed - ~p~n\", [Error])\n        end\n    catch\n        Class:Reason:Stack ->\n            io:format(\"    ✗ Exception during HTTP test: ~p:~p~n\", [Class, Reason])\n    end.\n\n%%====================================================================\n%% Integration Tests\n%%====================================================================\n\ntest_integration() ->\n    io:format(\"  Registry Integration:~n\"),\n    test_registry_integration(),\n\n    io:format(\"  Transport Registration:~n\"),\n    test_transport_registration().\n\ntest_registry_integration() ->\n    try\n        case erlmcp_registry:start_link() of\n            {ok, Pid} ->\n                io:format(\"    ✓ Registry startup: successful~n\"),\n\n                % Test basic registry functions\n                case catch erlmcp_registry:list_transports() of\n                    List when is_list(List) ->\n                        io:format(\"    ✓ List transports: functional (~p items)~n\", [length(List)]);\n                    Error ->\n                        io:format(\"    ✗ List transports: failed - ~p~n\", [Error])\n                end,\n\n                gen_server:stop(Pid, shutdown, 1000);\n            {error, {already_started, _}} ->\n                io:format(\"    ✓ Registry: already running~n\");\n            Error ->\n                io:format(\"    ✗ Registry startup: failed - ~p~n\", [Error])\n        end\n    catch\n        Class:Reason ->\n            io:format(\"    ✗ Registry integration exception: ~p:~p~n\", [Class, Reason])\n    end.\n\ntest_transport_registration() ->\n    try\n        % Ensure registry is running\n        case whereis(erlmcp_registry) of\n            undefined ->\n                case erlmcp_registry:start_link() of\n                    {ok, _} ->\n                        ok;\n                    {error, {already_started, _}} ->\n                        ok;\n                    Error ->\n                        io:format(\"    ✗ Could not start registry: ~p~n\", [Error]),\n                        ok\n                end;\n            _ ->\n                ok\n        end,\n\n        % Try to start transport and check registration\n        Config = #{test_mode => true},\n        case erlmcp_transport_stdio_new:start_link(reg_test_transport, Config) of\n            {ok, Pid} ->\n                timer:sleep(200), % Allow registration to complete\n\n                case catch erlmcp_registry:find_transport(reg_test_transport) of\n                    {ok, {RegPid, RegConfig}} ->\n                        io:format(\"    â Transport registered: PID matches: ~p, Config has type: \"\n                                  \"~p~n\",\n                                  [RegPid =:= Pid, maps:is_key(type, RegConfig)]);\n                    {error, not_found} ->\n                        io:format(\"    ✗ Transport not found in registry~n\");\n                    {'EXIT', Reason10} ->\n                        io:format(\"    ✗ Registry lookup failed: ~p~n\", [Reason10]);\n                    Other10 ->\n                        io:format(\"    ✗ Registry lookup failed: ~p~n\", [Other10])\n                end,\n\n                gen_server:stop(Pid, shutdown, 1000);\n            {error, Reason11} ->\n                io:format(\"    ✗ Transport registration test failed: ~p~n\", [Reason11])\n        end\n    catch\n        Class:Reason ->\n            io:format(\"    ✗ Registration test exception: ~p:~p~n\", [Class, Reason])\n    end.\n\n%%====================================================================\n%% Message Processing Tests\n%%====================================================================\n\ntest_message_processing() ->\n    io:format(\"  Message Processing:~n\"),\n    test_message_formats(),\n    test_line_processing().\n\ntest_message_formats() ->\n    try\n        % Test JSON message creation (if transport behavior module has it)\n        case catch erlmcp_transport:create_message(<<\"test_method\">>, #{param => value}, 1) of\n            Message when is_map(Message) ->\n                io:format(\"    ✓ Message creation: functional~n\"),\n                case maps:get(<<\"method\">>, Message, undefined) of\n                    <<\"test_method\">> ->\n                        io:format(\"    ✓ Message format: correct~n\");\n                    _ ->\n                        io:format(\"    ✗ Message format: incorrect~n\")\n                end;\n            Error ->\n                io:format(\"    ✗ Message creation: failed - ~p~n\", [Error])\n        end\n    catch\n        Class:Reason ->\n            io:format(\"    ✗ Message format test exception: ~p:~p~n\", [Class, Reason])\n    end.\n\ntest_line_processing() ->\n    try\n        % Test line trimming function from STDIO transport\n        TestCases =\n            [{<<\"hello\\n\">>, <<\"hello\">>},\n             {<<\"hello\\r\\n\">>, <<\"hello\">>},\n             {<<\"hello\">>, <<\"hello\">>},\n             {<<\"\\n\">>, <<>>}],\n\n        Results =\n            lists:map(fun({Input, Expected}) ->\n                         case catch erlmcp_transport_stdio_new:trim_line(Input) of\n                             Expected -> true;\n                             Other ->\n                                 io:format(\"    â Line trim failed: ~p -> ~p (expected ~p)~n\",\n                                           [Input, Other, Expected]),\n                                 false\n                         end\n                      end,\n                      TestCases),\n\n        case lists:all(fun(R) -> R end, Results) of\n            true ->\n                io:format(\"    ✓ Line processing: all test cases passed~n\");\n            false ->\n                io:format(\"    ✗ Line processing: some test cases failed~n\")\n        end\n    catch\n        Class:Reason ->\n            io:format(\"    ✗ Line processing test exception: ~p:~p~n\", [Class, Reason])\n    end.\n"
        }
    ]
}