{
    "sourceFile": "test/erlmcp_transport_tcp_quick_SUITE.erl",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756189861170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756190592775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,43 +5,62 @@\n \n -export([all/0, init_per_suite/1, end_per_suite/1]).\n -export([tcp_start_test_mode/1, tcp_info_shape/1, tcp_transport_calls/1]).\n \n-all() -> [tcp_start_test_mode, tcp_info_shape, tcp_transport_calls].\n+all() ->\n+  [tcp_start_test_mode, tcp_info_shape, tcp_transport_calls].\n \n init_per_suite(Config) ->\n-    case whereis(erlmcp_transport_sup) of\n-        undefined -> {ok, _} = erlmcp_transport_sup:start_link();\n-        _ -> ok\n-    end,\n-    Config.\n+  case whereis(erlmcp_transport_sup) of\n+    undefined ->\n+      {ok, _} = erlmcp_transport_sup:start_link();\n+    _ ->\n+      ok\n+  end,\n+  Config.\n \n-end_per_suite(_Config) -> ok.\n+end_per_suite(_Config) ->\n+  ok.\n \n %% Start TCP in test_mode and ensure pid\n tcp_start_test_mode(_Config) ->\n-    TId = tcp_qw_1,\n-    {ok, Pid} = erlmcp_transport_sup:start_child(TId, tcp, #{host => \"127.0.0.1\", port => 65535, test_mode => true}),\n-    ?assert(is_pid(Pid)),\n-    ok = erlmcp_transport_sup:stop_child(TId).\n+  TId = tcp_qw_1,\n+  {ok, Pid} =\n+    erlmcp_transport_sup:start_child(TId,\n+                                     tcp,\n+                                     #{host => \"127.0.0.1\",\n+                                       port => 65535,\n+                                       test_mode => true}),\n+  ?assert(is_pid(Pid)),\n+  ok = erlmcp_transport_sup:stop_child(TId).\n \n %% Verify get_info shape in test mode\n tcp_info_shape(_Config) ->\n-    TId = tcp_qw_2,\n-    {ok, Pid} = erlmcp_transport_sup:start_child(TId, tcp, #{host => \"127.0.0.1\", port => 65535, test_mode => true}),\n-    Info = erlmcp_transport_tcp:get_info(Pid),\n-    ?assertEqual(tcp, maps:get(type, Info, undefined)),\n-    ?assert(maps:is_key(status, Info)),\n-    ?assert(maps:is_key(statistics, Info)),\n-    ok = erlmcp_transport_sup:stop_child(TId).\n+  TId = tcp_qw_2,\n+  {ok, Pid} =\n+    erlmcp_transport_sup:start_child(TId,\n+                                     tcp,\n+                                     #{host => \"127.0.0.1\",\n+                                       port => 65535,\n+                                       test_mode => true}),\n+  Info = erlmcp_transport_tcp:get_info(Pid),\n+  ?assertEqual(tcp, maps:get(type, Info, undefined)),\n+  ?assert(maps:is_key(status, Info)),\n+  ?assert(maps:is_key(statistics, Info)),\n+  ok = erlmcp_transport_sup:stop_child(TId).\n \n %% Exercise transport calls\n tcp_transport_calls(_Config) ->\n-    TId = tcp_qw_3,\n-    {ok, Pid} = erlmcp_transport_sup:start_child(TId, tcp, #{host => \"127.0.0.1\", port => 65535, test_mode => true}),\n-    {reply, {ok, _Sock}, _} = gen_server:call(Pid, {transport_call, get_socket}),\n-    {reply, {ok, Conn}, _} = gen_server:call(Pid, {transport_call, get_connection}),\n-    ?assert(maps:is_key(host, Conn)),\n-    {reply, {ok, Stats}, _} = gen_server:call(Pid, {transport_call, get_stats}),\n-    ?assert(maps:is_key(messages_sent, Stats)),\n-    {reply, ok, _} = gen_server:call(Pid, {transport_call, reconnect}),\n-    ok = erlmcp_transport_sup:stop_child(TId).\n+  TId = tcp_qw_3,\n+  {ok, Pid} =\n+    erlmcp_transport_sup:start_child(TId,\n+                                     tcp,\n+                                     #{host => \"127.0.0.1\",\n+                                       port => 65535,\n+                                       test_mode => true}),\n+  {reply, {ok, _Sock}, _} = gen_server:call(Pid, {transport_call, get_socket}),\n+  {reply, {ok, Conn}, _} = gen_server:call(Pid, {transport_call, get_connection}),\n+  ?assert(maps:is_key(host, Conn)),\n+  {reply, {ok, Stats}, _} = gen_server:call(Pid, {transport_call, get_stats}),\n+  ?assert(maps:is_key(messages_sent, Stats)),\n+  {reply, ok, _} = gen_server:call(Pid, {transport_call, reconnect}),\n+  ok = erlmcp_transport_sup:stop_child(TId).\n"
                }
            ],
            "date": 1756189861170,
            "name": "Commit-0",
            "content": "-module(erlmcp_transport_tcp_quick_SUITE).\n\n-include_lib(\"common_test/include/ct.hrl\").\n-include_lib(\"eunit/include/eunit.hrl\").\n\n-export([all/0, init_per_suite/1, end_per_suite/1]).\n-export([tcp_start_test_mode/1, tcp_info_shape/1, tcp_transport_calls/1]).\n\nall() -> [tcp_start_test_mode, tcp_info_shape, tcp_transport_calls].\n\ninit_per_suite(Config) ->\n    case whereis(erlmcp_transport_sup) of\n        undefined -> {ok, _} = erlmcp_transport_sup:start_link();\n        _ -> ok\n    end,\n    Config.\n\nend_per_suite(_Config) -> ok.\n\n%% Start TCP in test_mode and ensure pid\ntcp_start_test_mode(_Config) ->\n    TId = tcp_qw_1,\n    {ok, Pid} = erlmcp_transport_sup:start_child(TId, tcp, #{host => \"127.0.0.1\", port => 65535, test_mode => true}),\n    ?assert(is_pid(Pid)),\n    ok = erlmcp_transport_sup:stop_child(TId).\n\n%% Verify get_info shape in test mode\ntcp_info_shape(_Config) ->\n    TId = tcp_qw_2,\n    {ok, Pid} = erlmcp_transport_sup:start_child(TId, tcp, #{host => \"127.0.0.1\", port => 65535, test_mode => true}),\n    Info = erlmcp_transport_tcp:get_info(Pid),\n    ?assertEqual(tcp, maps:get(type, Info, undefined)),\n    ?assert(maps:is_key(status, Info)),\n    ?assert(maps:is_key(statistics, Info)),\n    ok = erlmcp_transport_sup:stop_child(TId).\n\n%% Exercise transport calls\ntcp_transport_calls(_Config) ->\n    TId = tcp_qw_3,\n    {ok, Pid} = erlmcp_transport_sup:start_child(TId, tcp, #{host => \"127.0.0.1\", port => 65535, test_mode => true}),\n    {reply, {ok, _Sock}, _} = gen_server:call(Pid, {transport_call, get_socket}),\n    {reply, {ok, Conn}, _} = gen_server:call(Pid, {transport_call, get_connection}),\n    ?assert(maps:is_key(host, Conn)),\n    {reply, {ok, Stats}, _} = gen_server:call(Pid, {transport_call, get_stats}),\n    ?assert(maps:is_key(messages_sent, Stats)),\n    {reply, ok, _} = gen_server:call(Pid, {transport_call, reconnect}),\n    ok = erlmcp_transport_sup:stop_child(TId).\n"
        }
    ]
}